#include <stdio.h>
#include <math.h>

// Declaración de funciones
float metodoBiseccion1();
float metodoBiseccion2();
float metodoFalsaPos1();
float metodoFalsaPos2();

int main() {
    printf("f(c) = ((g*m/c) * (1 - exp(-c*t/m))) - v\n");

    printf("\nMétodo de bisección:\n");
    metodoBiseccion1();

    printf("\nMétodo de falsa posición:\n");
    metodoFalsaPos1();

    printf("\n\nf(x) = x^10 - 1\n");

    printf("\nMétodo de bisección:\n");
    metodoBiseccion2();

    printf("\nMétodo de falsa posición:\n");
    metodoFalsaPos2();

    return 0;
}

// ============================
// MÉTODO DE BISECCIÓN (física)
// ============================
float metodoBiseccion1() {
    float a = 4, b = 20;
    float g = 9.81, m = 68.1, v = 40, t = 10;
    float fa, fb, fk, k, prevK, errorRel;
    float errorMax = 0.0001;
    int iter = 0, iterMax = 100;

    printf("%-6s %-12s %-12s %-12s %-12s %-12s %-12s %-12s\n",
           "Iter", "a", "b", "k", "f(a)", "f(b)", "f(k)", "E_rel");

    prevK = a;

    do {
        k = (a + b) / 2.0;

        fa = (g * m / a) * (1 - exp(-a * t / m)) - v;
        fb = (g * m / b) * (1 - exp(-b * t / m)) - v;
        fk = (g * m / k) * (1 - exp(-k * t / m)) - v;

        errorRel = fabs((k - prevK) / k) * 100.0;

        printf("%-6d %-12.6f %-12.6f %-12.6f %-12.5f %-12.5f %-12.5f %-12.6f\n",
               iter, a, b, k, fa, fb, fk, errorRel);

        if (fa * fk < 0)
            b = k;
        else
            a = k;

        if (fk == 0)
            break;

        prevK = k;
        iter++;

    } while (errorRel > errorMax && iter < iterMax);

    return k;
}

// ==================================
// MÉTODO DE FALSA POSICIÓN (física)
// ==================================
float metodoFalsaPos1() {
    float a = 4, b = 20;
    float g = 9.81, m = 68.1, v = 40, t = 10;
    float fa, fb, fk, k, prevK, errorRel;
    float errorMax = 0.0001;
    int iter = 0, iterMax = 100;

    printf("%-6s %-12s %-12s %-12s %-12s %-12s %-12s %-12s\n",
           "Iter", "a", "b", "k", "f(a)", "f(b)", "f(k)", "E_rel");

    prevK = a;

    do {
        fa = (g * m / a) * (1 - exp(-a * t / m)) - v;
        fb = (g * m / b) * (1 - exp(-b * t / m)) - v;

        k = (a * fb - b * fa) / (fb - fa);
        fk = (g * m / k) * (1 - exp(-k * t / m)) - v;

        errorRel = fabs((k - prevK) / k) * 100.0;

        printf("%-6d %-12.6f %-12.6f %-12.6f %-12.5f %-12.5f %-12.5f %-12.6f\n",
               iter, a, b, k, fa, fb, fk, errorRel);

        if (fa * fk < 0)
            b = k;
        else
            a = k;

        if (fk == 0)
            break;

        prevK = k;
        iter++;

    } while (errorRel > errorMax && iter < it
